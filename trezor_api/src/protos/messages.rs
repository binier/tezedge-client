// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `messages.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MessageType {
    MessageType_Initialize = 0,
    MessageType_Ping = 1,
    MessageType_Success = 2,
    MessageType_Failure = 3,
    MessageType_ChangePin = 4,
    MessageType_WipeDevice = 5,
    MessageType_GetEntropy = 9,
    MessageType_Entropy = 10,
    MessageType_LoadDevice = 13,
    MessageType_ResetDevice = 14,
    MessageType_Features = 17,
    MessageType_PinMatrixRequest = 18,
    MessageType_PinMatrixAck = 19,
    MessageType_Cancel = 20,
    MessageType_ClearSession = 24,
    MessageType_ApplySettings = 25,
    MessageType_ButtonRequest = 26,
    MessageType_ButtonAck = 27,
    MessageType_ApplyFlags = 28,
    MessageType_BackupDevice = 34,
    MessageType_EntropyRequest = 35,
    MessageType_EntropyAck = 36,
    MessageType_PassphraseRequest = 41,
    MessageType_PassphraseAck = 42,
    MessageType_PassphraseStateRequest = 77,
    MessageType_PassphraseStateAck = 78,
    MessageType_RecoveryDevice = 45,
    MessageType_WordRequest = 46,
    MessageType_WordAck = 47,
    MessageType_GetFeatures = 55,
    MessageType_SetU2FCounter = 63,
    MessageType_FirmwareErase = 6,
    MessageType_FirmwareUpload = 7,
    MessageType_FirmwareRequest = 8,
    MessageType_SelfTest = 32,
    MessageType_GetPublicKey = 11,
    MessageType_PublicKey = 12,
    MessageType_SignTx = 15,
    MessageType_TxRequest = 21,
    MessageType_TxAck = 22,
    MessageType_GetAddress = 29,
    MessageType_Address = 30,
    MessageType_SignMessage = 38,
    MessageType_VerifyMessage = 39,
    MessageType_MessageSignature = 40,
    MessageType_CipherKeyValue = 23,
    MessageType_CipheredKeyValue = 48,
    MessageType_SignIdentity = 53,
    MessageType_SignedIdentity = 54,
    MessageType_GetECDHSessionKey = 61,
    MessageType_ECDHSessionKey = 62,
    MessageType_CosiCommit = 71,
    MessageType_CosiCommitment = 72,
    MessageType_CosiSign = 73,
    MessageType_CosiSignature = 74,
    MessageType_DebugLinkDecision = 100,
    MessageType_DebugLinkGetState = 101,
    MessageType_DebugLinkState = 102,
    MessageType_DebugLinkStop = 103,
    MessageType_DebugLinkLog = 104,
    MessageType_DebugLinkMemoryRead = 110,
    MessageType_DebugLinkMemory = 111,
    MessageType_DebugLinkMemoryWrite = 112,
    MessageType_DebugLinkFlashErase = 113,
    MessageType_EthereumGetAddress = 56,
    MessageType_EthereumAddress = 57,
    MessageType_EthereumSignTx = 58,
    MessageType_EthereumTxRequest = 59,
    MessageType_EthereumTxAck = 60,
    MessageType_EthereumSignMessage = 64,
    MessageType_EthereumVerifyMessage = 65,
    MessageType_EthereumMessageSignature = 66,
    MessageType_NEMGetAddress = 67,
    MessageType_NEMAddress = 68,
    MessageType_NEMSignTx = 69,
    MessageType_NEMSignedTx = 70,
    MessageType_NEMDecryptMessage = 75,
    MessageType_NEMDecryptedMessage = 76,
    MessageType_LiskGetAddress = 114,
    MessageType_LiskAddress = 115,
    MessageType_LiskSignTx = 116,
    MessageType_LiskSignedTx = 117,
    MessageType_LiskSignMessage = 118,
    MessageType_LiskMessageSignature = 119,
    MessageType_LiskVerifyMessage = 120,
    MessageType_LiskGetPublicKey = 121,
    MessageType_LiskPublicKey = 122,
    MessageType_TezosGetAddress = 150,
    MessageType_TezosAddress = 151,
    MessageType_TezosSignTx = 152,
    MessageType_TezosSignedTx = 153,
    MessageType_TezosGetPublicKey = 154,
    MessageType_TezosPublicKey = 155,
    MessageType_StellarSignTx = 202,
    MessageType_StellarTxOpRequest = 203,
    MessageType_StellarGetAddress = 207,
    MessageType_StellarAddress = 208,
    MessageType_StellarCreateAccountOp = 210,
    MessageType_StellarPaymentOp = 211,
    MessageType_StellarPathPaymentOp = 212,
    MessageType_StellarManageOfferOp = 213,
    MessageType_StellarCreatePassiveOfferOp = 214,
    MessageType_StellarSetOptionsOp = 215,
    MessageType_StellarChangeTrustOp = 216,
    MessageType_StellarAllowTrustOp = 217,
    MessageType_StellarAccountMergeOp = 218,
    MessageType_StellarManageDataOp = 220,
    MessageType_StellarBumpSequenceOp = 221,
    MessageType_StellarSignedTx = 230,
    MessageType_TronGetAddress = 250,
    MessageType_TronAddress = 251,
    MessageType_TronSignTx = 252,
    MessageType_TronSignedTx = 253,
    MessageType_CardanoSignTx = 303,
    MessageType_CardanoTxRequest = 304,
    MessageType_CardanoGetPublicKey = 305,
    MessageType_CardanoPublicKey = 306,
    MessageType_CardanoGetAddress = 307,
    MessageType_CardanoAddress = 308,
    MessageType_CardanoTxAck = 309,
    MessageType_CardanoSignedTx = 310,
    MessageType_OntologyGetAddress = 350,
    MessageType_OntologyAddress = 351,
    MessageType_OntologyGetPublicKey = 352,
    MessageType_OntologyPublicKey = 353,
    MessageType_OntologySignTransfer = 354,
    MessageType_OntologySignedTransfer = 355,
    MessageType_OntologySignWithdrawOng = 356,
    MessageType_OntologySignedWithdrawOng = 357,
    MessageType_OntologySignOntIdRegister = 358,
    MessageType_OntologySignedOntIdRegister = 359,
    MessageType_OntologySignOntIdAddAttributes = 360,
    MessageType_OntologySignedOntIdAddAttributes = 361,
    MessageType_RippleGetAddress = 400,
    MessageType_RippleAddress = 401,
    MessageType_RippleSignTx = 402,
    MessageType_RippleSignedTx = 403,
    MessageType_MoneroTransactionInitRequest = 501,
    MessageType_MoneroTransactionInitAck = 502,
    MessageType_MoneroTransactionSetInputRequest = 503,
    MessageType_MoneroTransactionSetInputAck = 504,
    MessageType_MoneroTransactionInputsPermutationRequest = 505,
    MessageType_MoneroTransactionInputsPermutationAck = 506,
    MessageType_MoneroTransactionInputViniRequest = 507,
    MessageType_MoneroTransactionInputViniAck = 508,
    MessageType_MoneroTransactionAllInputsSetRequest = 509,
    MessageType_MoneroTransactionAllInputsSetAck = 510,
    MessageType_MoneroTransactionSetOutputRequest = 511,
    MessageType_MoneroTransactionSetOutputAck = 512,
    MessageType_MoneroTransactionAllOutSetRequest = 513,
    MessageType_MoneroTransactionAllOutSetAck = 514,
    MessageType_MoneroTransactionMlsagDoneRequest = 515,
    MessageType_MoneroTransactionMlsagDoneAck = 516,
    MessageType_MoneroTransactionSignInputRequest = 517,
    MessageType_MoneroTransactionSignInputAck = 518,
    MessageType_MoneroTransactionFinalRequest = 519,
    MessageType_MoneroTransactionFinalAck = 520,
    MessageType_MoneroKeyImageExportInitRequest = 530,
    MessageType_MoneroKeyImageExportInitAck = 531,
    MessageType_MoneroKeyImageSyncStepRequest = 532,
    MessageType_MoneroKeyImageSyncStepAck = 533,
    MessageType_MoneroKeyImageSyncFinalRequest = 534,
    MessageType_MoneroKeyImageSyncFinalAck = 535,
    MessageType_MoneroGetAddress = 540,
    MessageType_MoneroAddress = 541,
    MessageType_MoneroGetWatchKey = 542,
    MessageType_MoneroWatchKey = 543,
    MessageType_DebugMoneroDiagRequest = 546,
    MessageType_DebugMoneroDiagAck = 547,
}

impl ::protobuf::ProtobufEnum for MessageType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MessageType> {
        match value {
            0 => ::std::option::Option::Some(MessageType::MessageType_Initialize),
            1 => ::std::option::Option::Some(MessageType::MessageType_Ping),
            2 => ::std::option::Option::Some(MessageType::MessageType_Success),
            3 => ::std::option::Option::Some(MessageType::MessageType_Failure),
            4 => ::std::option::Option::Some(MessageType::MessageType_ChangePin),
            5 => ::std::option::Option::Some(MessageType::MessageType_WipeDevice),
            9 => ::std::option::Option::Some(MessageType::MessageType_GetEntropy),
            10 => ::std::option::Option::Some(MessageType::MessageType_Entropy),
            13 => ::std::option::Option::Some(MessageType::MessageType_LoadDevice),
            14 => ::std::option::Option::Some(MessageType::MessageType_ResetDevice),
            17 => ::std::option::Option::Some(MessageType::MessageType_Features),
            18 => ::std::option::Option::Some(MessageType::MessageType_PinMatrixRequest),
            19 => ::std::option::Option::Some(MessageType::MessageType_PinMatrixAck),
            20 => ::std::option::Option::Some(MessageType::MessageType_Cancel),
            24 => ::std::option::Option::Some(MessageType::MessageType_ClearSession),
            25 => ::std::option::Option::Some(MessageType::MessageType_ApplySettings),
            26 => ::std::option::Option::Some(MessageType::MessageType_ButtonRequest),
            27 => ::std::option::Option::Some(MessageType::MessageType_ButtonAck),
            28 => ::std::option::Option::Some(MessageType::MessageType_ApplyFlags),
            34 => ::std::option::Option::Some(MessageType::MessageType_BackupDevice),
            35 => ::std::option::Option::Some(MessageType::MessageType_EntropyRequest),
            36 => ::std::option::Option::Some(MessageType::MessageType_EntropyAck),
            41 => ::std::option::Option::Some(MessageType::MessageType_PassphraseRequest),
            42 => ::std::option::Option::Some(MessageType::MessageType_PassphraseAck),
            77 => ::std::option::Option::Some(MessageType::MessageType_PassphraseStateRequest),
            78 => ::std::option::Option::Some(MessageType::MessageType_PassphraseStateAck),
            45 => ::std::option::Option::Some(MessageType::MessageType_RecoveryDevice),
            46 => ::std::option::Option::Some(MessageType::MessageType_WordRequest),
            47 => ::std::option::Option::Some(MessageType::MessageType_WordAck),
            55 => ::std::option::Option::Some(MessageType::MessageType_GetFeatures),
            63 => ::std::option::Option::Some(MessageType::MessageType_SetU2FCounter),
            6 => ::std::option::Option::Some(MessageType::MessageType_FirmwareErase),
            7 => ::std::option::Option::Some(MessageType::MessageType_FirmwareUpload),
            8 => ::std::option::Option::Some(MessageType::MessageType_FirmwareRequest),
            32 => ::std::option::Option::Some(MessageType::MessageType_SelfTest),
            11 => ::std::option::Option::Some(MessageType::MessageType_GetPublicKey),
            12 => ::std::option::Option::Some(MessageType::MessageType_PublicKey),
            15 => ::std::option::Option::Some(MessageType::MessageType_SignTx),
            21 => ::std::option::Option::Some(MessageType::MessageType_TxRequest),
            22 => ::std::option::Option::Some(MessageType::MessageType_TxAck),
            29 => ::std::option::Option::Some(MessageType::MessageType_GetAddress),
            30 => ::std::option::Option::Some(MessageType::MessageType_Address),
            38 => ::std::option::Option::Some(MessageType::MessageType_SignMessage),
            39 => ::std::option::Option::Some(MessageType::MessageType_VerifyMessage),
            40 => ::std::option::Option::Some(MessageType::MessageType_MessageSignature),
            23 => ::std::option::Option::Some(MessageType::MessageType_CipherKeyValue),
            48 => ::std::option::Option::Some(MessageType::MessageType_CipheredKeyValue),
            53 => ::std::option::Option::Some(MessageType::MessageType_SignIdentity),
            54 => ::std::option::Option::Some(MessageType::MessageType_SignedIdentity),
            61 => ::std::option::Option::Some(MessageType::MessageType_GetECDHSessionKey),
            62 => ::std::option::Option::Some(MessageType::MessageType_ECDHSessionKey),
            71 => ::std::option::Option::Some(MessageType::MessageType_CosiCommit),
            72 => ::std::option::Option::Some(MessageType::MessageType_CosiCommitment),
            73 => ::std::option::Option::Some(MessageType::MessageType_CosiSign),
            74 => ::std::option::Option::Some(MessageType::MessageType_CosiSignature),
            100 => ::std::option::Option::Some(MessageType::MessageType_DebugLinkDecision),
            101 => ::std::option::Option::Some(MessageType::MessageType_DebugLinkGetState),
            102 => ::std::option::Option::Some(MessageType::MessageType_DebugLinkState),
            103 => ::std::option::Option::Some(MessageType::MessageType_DebugLinkStop),
            104 => ::std::option::Option::Some(MessageType::MessageType_DebugLinkLog),
            110 => ::std::option::Option::Some(MessageType::MessageType_DebugLinkMemoryRead),
            111 => ::std::option::Option::Some(MessageType::MessageType_DebugLinkMemory),
            112 => ::std::option::Option::Some(MessageType::MessageType_DebugLinkMemoryWrite),
            113 => ::std::option::Option::Some(MessageType::MessageType_DebugLinkFlashErase),
            56 => ::std::option::Option::Some(MessageType::MessageType_EthereumGetAddress),
            57 => ::std::option::Option::Some(MessageType::MessageType_EthereumAddress),
            58 => ::std::option::Option::Some(MessageType::MessageType_EthereumSignTx),
            59 => ::std::option::Option::Some(MessageType::MessageType_EthereumTxRequest),
            60 => ::std::option::Option::Some(MessageType::MessageType_EthereumTxAck),
            64 => ::std::option::Option::Some(MessageType::MessageType_EthereumSignMessage),
            65 => ::std::option::Option::Some(MessageType::MessageType_EthereumVerifyMessage),
            66 => ::std::option::Option::Some(MessageType::MessageType_EthereumMessageSignature),
            67 => ::std::option::Option::Some(MessageType::MessageType_NEMGetAddress),
            68 => ::std::option::Option::Some(MessageType::MessageType_NEMAddress),
            69 => ::std::option::Option::Some(MessageType::MessageType_NEMSignTx),
            70 => ::std::option::Option::Some(MessageType::MessageType_NEMSignedTx),
            75 => ::std::option::Option::Some(MessageType::MessageType_NEMDecryptMessage),
            76 => ::std::option::Option::Some(MessageType::MessageType_NEMDecryptedMessage),
            114 => ::std::option::Option::Some(MessageType::MessageType_LiskGetAddress),
            115 => ::std::option::Option::Some(MessageType::MessageType_LiskAddress),
            116 => ::std::option::Option::Some(MessageType::MessageType_LiskSignTx),
            117 => ::std::option::Option::Some(MessageType::MessageType_LiskSignedTx),
            118 => ::std::option::Option::Some(MessageType::MessageType_LiskSignMessage),
            119 => ::std::option::Option::Some(MessageType::MessageType_LiskMessageSignature),
            120 => ::std::option::Option::Some(MessageType::MessageType_LiskVerifyMessage),
            121 => ::std::option::Option::Some(MessageType::MessageType_LiskGetPublicKey),
            122 => ::std::option::Option::Some(MessageType::MessageType_LiskPublicKey),
            150 => ::std::option::Option::Some(MessageType::MessageType_TezosGetAddress),
            151 => ::std::option::Option::Some(MessageType::MessageType_TezosAddress),
            152 => ::std::option::Option::Some(MessageType::MessageType_TezosSignTx),
            153 => ::std::option::Option::Some(MessageType::MessageType_TezosSignedTx),
            154 => ::std::option::Option::Some(MessageType::MessageType_TezosGetPublicKey),
            155 => ::std::option::Option::Some(MessageType::MessageType_TezosPublicKey),
            202 => ::std::option::Option::Some(MessageType::MessageType_StellarSignTx),
            203 => ::std::option::Option::Some(MessageType::MessageType_StellarTxOpRequest),
            207 => ::std::option::Option::Some(MessageType::MessageType_StellarGetAddress),
            208 => ::std::option::Option::Some(MessageType::MessageType_StellarAddress),
            210 => ::std::option::Option::Some(MessageType::MessageType_StellarCreateAccountOp),
            211 => ::std::option::Option::Some(MessageType::MessageType_StellarPaymentOp),
            212 => ::std::option::Option::Some(MessageType::MessageType_StellarPathPaymentOp),
            213 => ::std::option::Option::Some(MessageType::MessageType_StellarManageOfferOp),
            214 => ::std::option::Option::Some(MessageType::MessageType_StellarCreatePassiveOfferOp),
            215 => ::std::option::Option::Some(MessageType::MessageType_StellarSetOptionsOp),
            216 => ::std::option::Option::Some(MessageType::MessageType_StellarChangeTrustOp),
            217 => ::std::option::Option::Some(MessageType::MessageType_StellarAllowTrustOp),
            218 => ::std::option::Option::Some(MessageType::MessageType_StellarAccountMergeOp),
            220 => ::std::option::Option::Some(MessageType::MessageType_StellarManageDataOp),
            221 => ::std::option::Option::Some(MessageType::MessageType_StellarBumpSequenceOp),
            230 => ::std::option::Option::Some(MessageType::MessageType_StellarSignedTx),
            250 => ::std::option::Option::Some(MessageType::MessageType_TronGetAddress),
            251 => ::std::option::Option::Some(MessageType::MessageType_TronAddress),
            252 => ::std::option::Option::Some(MessageType::MessageType_TronSignTx),
            253 => ::std::option::Option::Some(MessageType::MessageType_TronSignedTx),
            303 => ::std::option::Option::Some(MessageType::MessageType_CardanoSignTx),
            304 => ::std::option::Option::Some(MessageType::MessageType_CardanoTxRequest),
            305 => ::std::option::Option::Some(MessageType::MessageType_CardanoGetPublicKey),
            306 => ::std::option::Option::Some(MessageType::MessageType_CardanoPublicKey),
            307 => ::std::option::Option::Some(MessageType::MessageType_CardanoGetAddress),
            308 => ::std::option::Option::Some(MessageType::MessageType_CardanoAddress),
            309 => ::std::option::Option::Some(MessageType::MessageType_CardanoTxAck),
            310 => ::std::option::Option::Some(MessageType::MessageType_CardanoSignedTx),
            350 => ::std::option::Option::Some(MessageType::MessageType_OntologyGetAddress),
            351 => ::std::option::Option::Some(MessageType::MessageType_OntologyAddress),
            352 => ::std::option::Option::Some(MessageType::MessageType_OntologyGetPublicKey),
            353 => ::std::option::Option::Some(MessageType::MessageType_OntologyPublicKey),
            354 => ::std::option::Option::Some(MessageType::MessageType_OntologySignTransfer),
            355 => ::std::option::Option::Some(MessageType::MessageType_OntologySignedTransfer),
            356 => ::std::option::Option::Some(MessageType::MessageType_OntologySignWithdrawOng),
            357 => ::std::option::Option::Some(MessageType::MessageType_OntologySignedWithdrawOng),
            358 => ::std::option::Option::Some(MessageType::MessageType_OntologySignOntIdRegister),
            359 => ::std::option::Option::Some(MessageType::MessageType_OntologySignedOntIdRegister),
            360 => ::std::option::Option::Some(MessageType::MessageType_OntologySignOntIdAddAttributes),
            361 => ::std::option::Option::Some(MessageType::MessageType_OntologySignedOntIdAddAttributes),
            400 => ::std::option::Option::Some(MessageType::MessageType_RippleGetAddress),
            401 => ::std::option::Option::Some(MessageType::MessageType_RippleAddress),
            402 => ::std::option::Option::Some(MessageType::MessageType_RippleSignTx),
            403 => ::std::option::Option::Some(MessageType::MessageType_RippleSignedTx),
            501 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionInitRequest),
            502 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionInitAck),
            503 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionSetInputRequest),
            504 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionSetInputAck),
            505 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionInputsPermutationRequest),
            506 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionInputsPermutationAck),
            507 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionInputViniRequest),
            508 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionInputViniAck),
            509 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionAllInputsSetRequest),
            510 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionAllInputsSetAck),
            511 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionSetOutputRequest),
            512 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionSetOutputAck),
            513 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionAllOutSetRequest),
            514 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionAllOutSetAck),
            515 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionMlsagDoneRequest),
            516 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionMlsagDoneAck),
            517 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionSignInputRequest),
            518 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionSignInputAck),
            519 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionFinalRequest),
            520 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionFinalAck),
            530 => ::std::option::Option::Some(MessageType::MessageType_MoneroKeyImageExportInitRequest),
            531 => ::std::option::Option::Some(MessageType::MessageType_MoneroKeyImageExportInitAck),
            532 => ::std::option::Option::Some(MessageType::MessageType_MoneroKeyImageSyncStepRequest),
            533 => ::std::option::Option::Some(MessageType::MessageType_MoneroKeyImageSyncStepAck),
            534 => ::std::option::Option::Some(MessageType::MessageType_MoneroKeyImageSyncFinalRequest),
            535 => ::std::option::Option::Some(MessageType::MessageType_MoneroKeyImageSyncFinalAck),
            540 => ::std::option::Option::Some(MessageType::MessageType_MoneroGetAddress),
            541 => ::std::option::Option::Some(MessageType::MessageType_MoneroAddress),
            542 => ::std::option::Option::Some(MessageType::MessageType_MoneroGetWatchKey),
            543 => ::std::option::Option::Some(MessageType::MessageType_MoneroWatchKey),
            546 => ::std::option::Option::Some(MessageType::MessageType_DebugMoneroDiagRequest),
            547 => ::std::option::Option::Some(MessageType::MessageType_DebugMoneroDiagAck),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MessageType] = &[
            MessageType::MessageType_Initialize,
            MessageType::MessageType_Ping,
            MessageType::MessageType_Success,
            MessageType::MessageType_Failure,
            MessageType::MessageType_ChangePin,
            MessageType::MessageType_WipeDevice,
            MessageType::MessageType_GetEntropy,
            MessageType::MessageType_Entropy,
            MessageType::MessageType_LoadDevice,
            MessageType::MessageType_ResetDevice,
            MessageType::MessageType_Features,
            MessageType::MessageType_PinMatrixRequest,
            MessageType::MessageType_PinMatrixAck,
            MessageType::MessageType_Cancel,
            MessageType::MessageType_ClearSession,
            MessageType::MessageType_ApplySettings,
            MessageType::MessageType_ButtonRequest,
            MessageType::MessageType_ButtonAck,
            MessageType::MessageType_ApplyFlags,
            MessageType::MessageType_BackupDevice,
            MessageType::MessageType_EntropyRequest,
            MessageType::MessageType_EntropyAck,
            MessageType::MessageType_PassphraseRequest,
            MessageType::MessageType_PassphraseAck,
            MessageType::MessageType_PassphraseStateRequest,
            MessageType::MessageType_PassphraseStateAck,
            MessageType::MessageType_RecoveryDevice,
            MessageType::MessageType_WordRequest,
            MessageType::MessageType_WordAck,
            MessageType::MessageType_GetFeatures,
            MessageType::MessageType_SetU2FCounter,
            MessageType::MessageType_FirmwareErase,
            MessageType::MessageType_FirmwareUpload,
            MessageType::MessageType_FirmwareRequest,
            MessageType::MessageType_SelfTest,
            MessageType::MessageType_GetPublicKey,
            MessageType::MessageType_PublicKey,
            MessageType::MessageType_SignTx,
            MessageType::MessageType_TxRequest,
            MessageType::MessageType_TxAck,
            MessageType::MessageType_GetAddress,
            MessageType::MessageType_Address,
            MessageType::MessageType_SignMessage,
            MessageType::MessageType_VerifyMessage,
            MessageType::MessageType_MessageSignature,
            MessageType::MessageType_CipherKeyValue,
            MessageType::MessageType_CipheredKeyValue,
            MessageType::MessageType_SignIdentity,
            MessageType::MessageType_SignedIdentity,
            MessageType::MessageType_GetECDHSessionKey,
            MessageType::MessageType_ECDHSessionKey,
            MessageType::MessageType_CosiCommit,
            MessageType::MessageType_CosiCommitment,
            MessageType::MessageType_CosiSign,
            MessageType::MessageType_CosiSignature,
            MessageType::MessageType_DebugLinkDecision,
            MessageType::MessageType_DebugLinkGetState,
            MessageType::MessageType_DebugLinkState,
            MessageType::MessageType_DebugLinkStop,
            MessageType::MessageType_DebugLinkLog,
            MessageType::MessageType_DebugLinkMemoryRead,
            MessageType::MessageType_DebugLinkMemory,
            MessageType::MessageType_DebugLinkMemoryWrite,
            MessageType::MessageType_DebugLinkFlashErase,
            MessageType::MessageType_EthereumGetAddress,
            MessageType::MessageType_EthereumAddress,
            MessageType::MessageType_EthereumSignTx,
            MessageType::MessageType_EthereumTxRequest,
            MessageType::MessageType_EthereumTxAck,
            MessageType::MessageType_EthereumSignMessage,
            MessageType::MessageType_EthereumVerifyMessage,
            MessageType::MessageType_EthereumMessageSignature,
            MessageType::MessageType_NEMGetAddress,
            MessageType::MessageType_NEMAddress,
            MessageType::MessageType_NEMSignTx,
            MessageType::MessageType_NEMSignedTx,
            MessageType::MessageType_NEMDecryptMessage,
            MessageType::MessageType_NEMDecryptedMessage,
            MessageType::MessageType_LiskGetAddress,
            MessageType::MessageType_LiskAddress,
            MessageType::MessageType_LiskSignTx,
            MessageType::MessageType_LiskSignedTx,
            MessageType::MessageType_LiskSignMessage,
            MessageType::MessageType_LiskMessageSignature,
            MessageType::MessageType_LiskVerifyMessage,
            MessageType::MessageType_LiskGetPublicKey,
            MessageType::MessageType_LiskPublicKey,
            MessageType::MessageType_TezosGetAddress,
            MessageType::MessageType_TezosAddress,
            MessageType::MessageType_TezosSignTx,
            MessageType::MessageType_TezosSignedTx,
            MessageType::MessageType_TezosGetPublicKey,
            MessageType::MessageType_TezosPublicKey,
            MessageType::MessageType_StellarSignTx,
            MessageType::MessageType_StellarTxOpRequest,
            MessageType::MessageType_StellarGetAddress,
            MessageType::MessageType_StellarAddress,
            MessageType::MessageType_StellarCreateAccountOp,
            MessageType::MessageType_StellarPaymentOp,
            MessageType::MessageType_StellarPathPaymentOp,
            MessageType::MessageType_StellarManageOfferOp,
            MessageType::MessageType_StellarCreatePassiveOfferOp,
            MessageType::MessageType_StellarSetOptionsOp,
            MessageType::MessageType_StellarChangeTrustOp,
            MessageType::MessageType_StellarAllowTrustOp,
            MessageType::MessageType_StellarAccountMergeOp,
            MessageType::MessageType_StellarManageDataOp,
            MessageType::MessageType_StellarBumpSequenceOp,
            MessageType::MessageType_StellarSignedTx,
            MessageType::MessageType_TronGetAddress,
            MessageType::MessageType_TronAddress,
            MessageType::MessageType_TronSignTx,
            MessageType::MessageType_TronSignedTx,
            MessageType::MessageType_CardanoSignTx,
            MessageType::MessageType_CardanoTxRequest,
            MessageType::MessageType_CardanoGetPublicKey,
            MessageType::MessageType_CardanoPublicKey,
            MessageType::MessageType_CardanoGetAddress,
            MessageType::MessageType_CardanoAddress,
            MessageType::MessageType_CardanoTxAck,
            MessageType::MessageType_CardanoSignedTx,
            MessageType::MessageType_OntologyGetAddress,
            MessageType::MessageType_OntologyAddress,
            MessageType::MessageType_OntologyGetPublicKey,
            MessageType::MessageType_OntologyPublicKey,
            MessageType::MessageType_OntologySignTransfer,
            MessageType::MessageType_OntologySignedTransfer,
            MessageType::MessageType_OntologySignWithdrawOng,
            MessageType::MessageType_OntologySignedWithdrawOng,
            MessageType::MessageType_OntologySignOntIdRegister,
            MessageType::MessageType_OntologySignedOntIdRegister,
            MessageType::MessageType_OntologySignOntIdAddAttributes,
            MessageType::MessageType_OntologySignedOntIdAddAttributes,
            MessageType::MessageType_RippleGetAddress,
            MessageType::MessageType_RippleAddress,
            MessageType::MessageType_RippleSignTx,
            MessageType::MessageType_RippleSignedTx,
            MessageType::MessageType_MoneroTransactionInitRequest,
            MessageType::MessageType_MoneroTransactionInitAck,
            MessageType::MessageType_MoneroTransactionSetInputRequest,
            MessageType::MessageType_MoneroTransactionSetInputAck,
            MessageType::MessageType_MoneroTransactionInputsPermutationRequest,
            MessageType::MessageType_MoneroTransactionInputsPermutationAck,
            MessageType::MessageType_MoneroTransactionInputViniRequest,
            MessageType::MessageType_MoneroTransactionInputViniAck,
            MessageType::MessageType_MoneroTransactionAllInputsSetRequest,
            MessageType::MessageType_MoneroTransactionAllInputsSetAck,
            MessageType::MessageType_MoneroTransactionSetOutputRequest,
            MessageType::MessageType_MoneroTransactionSetOutputAck,
            MessageType::MessageType_MoneroTransactionAllOutSetRequest,
            MessageType::MessageType_MoneroTransactionAllOutSetAck,
            MessageType::MessageType_MoneroTransactionMlsagDoneRequest,
            MessageType::MessageType_MoneroTransactionMlsagDoneAck,
            MessageType::MessageType_MoneroTransactionSignInputRequest,
            MessageType::MessageType_MoneroTransactionSignInputAck,
            MessageType::MessageType_MoneroTransactionFinalRequest,
            MessageType::MessageType_MoneroTransactionFinalAck,
            MessageType::MessageType_MoneroKeyImageExportInitRequest,
            MessageType::MessageType_MoneroKeyImageExportInitAck,
            MessageType::MessageType_MoneroKeyImageSyncStepRequest,
            MessageType::MessageType_MoneroKeyImageSyncStepAck,
            MessageType::MessageType_MoneroKeyImageSyncFinalRequest,
            MessageType::MessageType_MoneroKeyImageSyncFinalAck,
            MessageType::MessageType_MoneroGetAddress,
            MessageType::MessageType_MoneroAddress,
            MessageType::MessageType_MoneroGetWatchKey,
            MessageType::MessageType_MoneroWatchKey,
            MessageType::MessageType_DebugMoneroDiagRequest,
            MessageType::MessageType_DebugMoneroDiagAck,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<MessageType>("MessageType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for MessageType {
}

impl ::std::default::Default for MessageType {
    fn default() -> Self {
        MessageType::MessageType_Initialize
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

/// Extension fields
pub mod exts {

    pub const wire_in: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::EnumValueOptions, ::protobuf::types::ProtobufTypeBool> = ::protobuf::ext::ExtFieldOptional { field_number: 50002, phantom: ::std::marker::PhantomData };

    pub const wire_out: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::EnumValueOptions, ::protobuf::types::ProtobufTypeBool> = ::protobuf::ext::ExtFieldOptional { field_number: 50003, phantom: ::std::marker::PhantomData };

    pub const wire_debug_in: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::EnumValueOptions, ::protobuf::types::ProtobufTypeBool> = ::protobuf::ext::ExtFieldOptional { field_number: 50004, phantom: ::std::marker::PhantomData };

    pub const wire_debug_out: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::EnumValueOptions, ::protobuf::types::ProtobufTypeBool> = ::protobuf::ext::ExtFieldOptional { field_number: 50005, phantom: ::std::marker::PhantomData };

    pub const wire_tiny: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::EnumValueOptions, ::protobuf::types::ProtobufTypeBool> = ::protobuf::ext::ExtFieldOptional { field_number: 50006, phantom: ::std::marker::PhantomData };

    pub const wire_bootloader: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::EnumValueOptions, ::protobuf::types::ProtobufTypeBool> = ::protobuf::ext::ExtFieldOptional { field_number: 50007, phantom: ::std::marker::PhantomData };

    pub const wire_no_fsm: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::EnumValueOptions, ::protobuf::types::ProtobufTypeBool> = ::protobuf::ext::ExtFieldOptional { field_number: 50008, phantom: ::std::marker::PhantomData };
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0emessages.proto\x12\x12hw.trezor.messages\x1a\x20google/protobuf/de\
    scriptor.proto*\xc67\n\x0bMessageType\x12$\n\x16MessageType_Initialize\
    \x10\0\x1a\x08\x90\xb5\x18\x01\xb0\xb5\x18\x01\x12\x1a\n\x10MessageType_\
    Ping\x10\x01\x1a\x04\x90\xb5\x18\x01\x12\x1d\n\x13MessageType_Success\
    \x10\x02\x1a\x04\x98\xb5\x18\x01\x12\x1d\n\x13MessageType_Failure\x10\
    \x03\x1a\x04\x98\xb5\x18\x01\x12\x1f\n\x15MessageType_ChangePin\x10\x04\
    \x1a\x04\x90\xb5\x18\x01\x12\x20\n\x16MessageType_WipeDevice\x10\x05\x1a\
    \x04\x90\xb5\x18\x01\x12\x20\n\x16MessageType_GetEntropy\x10\t\x1a\x04\
    \x90\xb5\x18\x01\x12\x1d\n\x13MessageType_Entropy\x10\n\x1a\x04\x98\xb5\
    \x18\x01\x12\x20\n\x16MessageType_LoadDevice\x10\r\x1a\x04\x90\xb5\x18\
    \x01\x12!\n\x17MessageType_ResetDevice\x10\x0e\x1a\x04\x90\xb5\x18\x01\
    \x12\x1e\n\x14MessageType_Features\x10\x11\x1a\x04\x98\xb5\x18\x01\x12&\
    \n\x1cMessageType_PinMatrixRequest\x10\x12\x1a\x04\x98\xb5\x18\x01\x12*\
    \n\x18MessageType_PinMatrixAck\x10\x13\x1a\x0c\xc0\xb5\x18\x01\xb0\xb5\
    \x18\x01\x90\xb5\x18\x01\x12\x20\n\x12MessageType_Cancel\x10\x14\x1a\x08\
    \x90\xb5\x18\x01\xb0\xb5\x18\x01\x12\"\n\x18MessageType_ClearSession\x10\
    \x18\x1a\x04\x90\xb5\x18\x01\x12#\n\x19MessageType_ApplySettings\x10\x19\
    \x1a\x04\x90\xb5\x18\x01\x12#\n\x19MessageType_ButtonRequest\x10\x1a\x1a\
    \x04\x98\xb5\x18\x01\x12'\n\x15MessageType_ButtonAck\x10\x1b\x1a\x0c\x90\
    \xb5\x18\x01\xc0\xb5\x18\x01\xb0\xb5\x18\x01\x12\x20\n\x16MessageType_Ap\
    plyFlags\x10\x1c\x1a\x04\x90\xb5\x18\x01\x12\"\n\x18MessageType_BackupDe\
    vice\x10\"\x1a\x04\x90\xb5\x18\x01\x12$\n\x1aMessageType_EntropyRequest\
    \x10#\x1a\x04\x98\xb5\x18\x01\x12\x20\n\x16MessageType_EntropyAck\x10$\
    \x1a\x04\x90\xb5\x18\x01\x12'\n\x1dMessageType_PassphraseRequest\x10)\
    \x1a\x04\x98\xb5\x18\x01\x12+\n\x19MessageType_PassphraseAck\x10*\x1a\
    \x0c\xb0\xb5\x18\x01\xc0\xb5\x18\x01\x90\xb5\x18\x01\x12,\n\"MessageType\
    _PassphraseStateRequest\x10M\x1a\x04\x98\xb5\x18\x01\x120\n\x1eMessageTy\
    pe_PassphraseStateAck\x10N\x1a\x0c\xc0\xb5\x18\x01\x90\xb5\x18\x01\xb0\
    \xb5\x18\x01\x12$\n\x1aMessageType_RecoveryDevice\x10-\x1a\x04\x90\xb5\
    \x18\x01\x12!\n\x17MessageType_WordRequest\x10.\x1a\x04\x98\xb5\x18\x01\
    \x12\x1d\n\x13MessageType_WordAck\x10/\x1a\x04\x90\xb5\x18\x01\x12!\n\
    \x17MessageType_GetFeatures\x107\x1a\x04\x90\xb5\x18\x01\x12#\n\x19Messa\
    geType_SetU2FCounter\x10?\x1a\x04\x90\xb5\x18\x01\x12'\n\x19MessageType_\
    FirmwareErase\x10\x06\x1a\x08\xb8\xb5\x18\x01\x90\xb5\x18\x01\x12(\n\x1a\
    MessageType_FirmwareUpload\x10\x07\x1a\x08\xb8\xb5\x18\x01\x90\xb5\x18\
    \x01\x12)\n\x1bMessageType_FirmwareRequest\x10\x08\x1a\x08\xb8\xb5\x18\
    \x01\x98\xb5\x18\x01\x12\"\n\x14MessageType_SelfTest\x10\x20\x1a\x08\x90\
    \xb5\x18\x01\xb8\xb5\x18\x01\x12\"\n\x18MessageType_GetPublicKey\x10\x0b\
    \x1a\x04\x90\xb5\x18\x01\x12\x1f\n\x15MessageType_PublicKey\x10\x0c\x1a\
    \x04\x98\xb5\x18\x01\x12\x1c\n\x12MessageType_SignTx\x10\x0f\x1a\x04\x90\
    \xb5\x18\x01\x12\x1f\n\x15MessageType_TxRequest\x10\x15\x1a\x04\x98\xb5\
    \x18\x01\x12\x1b\n\x11MessageType_TxAck\x10\x16\x1a\x04\x90\xb5\x18\x01\
    \x12\x20\n\x16MessageType_GetAddress\x10\x1d\x1a\x04\x90\xb5\x18\x01\x12\
    \x1d\n\x13MessageType_Address\x10\x1e\x1a\x04\x98\xb5\x18\x01\x12!\n\x17\
    MessageType_SignMessage\x10&\x1a\x04\x90\xb5\x18\x01\x12#\n\x19MessageTy\
    pe_VerifyMessage\x10'\x1a\x04\x90\xb5\x18\x01\x12&\n\x1cMessageType_Mess\
    ageSignature\x10(\x1a\x04\x98\xb5\x18\x01\x12$\n\x1aMessageType_CipherKe\
    yValue\x10\x17\x1a\x04\x90\xb5\x18\x01\x12&\n\x1cMessageType_CipheredKey\
    Value\x100\x1a\x04\x98\xb5\x18\x01\x12\"\n\x18MessageType_SignIdentity\
    \x105\x1a\x04\x90\xb5\x18\x01\x12$\n\x1aMessageType_SignedIdentity\x106\
    \x1a\x04\x98\xb5\x18\x01\x12'\n\x1dMessageType_GetECDHSessionKey\x10=\
    \x1a\x04\x90\xb5\x18\x01\x12$\n\x1aMessageType_ECDHSessionKey\x10>\x1a\
    \x04\x98\xb5\x18\x01\x12\x20\n\x16MessageType_CosiCommit\x10G\x1a\x04\
    \x90\xb5\x18\x01\x12$\n\x1aMessageType_CosiCommitment\x10H\x1a\x04\x98\
    \xb5\x18\x01\x12\x1e\n\x14MessageType_CosiSign\x10I\x1a\x04\x90\xb5\x18\
    \x01\x12#\n\x19MessageType_CosiSignature\x10J\x1a\x04\x98\xb5\x18\x01\
    \x12/\n\x1dMessageType_DebugLinkDecision\x10d\x1a\x0c\xc0\xb5\x18\x01\
    \xa0\xb5\x18\x01\xb0\xb5\x18\x01\x12+\n\x1dMessageType_DebugLinkGetState\
    \x10e\x1a\x08\xb0\xb5\x18\x01\xa0\xb5\x18\x01\x12$\n\x1aMessageType_Debu\
    gLinkState\x10f\x1a\x04\xa8\xb5\x18\x01\x12#\n\x19MessageType_DebugLinkS\
    top\x10g\x1a\x04\xa0\xb5\x18\x01\x12\"\n\x18MessageType_DebugLinkLog\x10\
    h\x1a\x04\xa8\xb5\x18\x01\x12)\n\x1fMessageType_DebugLinkMemoryRead\x10n\
    \x1a\x04\xa0\xb5\x18\x01\x12%\n\x1bMessageType_DebugLinkMemory\x10o\x1a\
    \x04\xa8\xb5\x18\x01\x12*\n\x20MessageType_DebugLinkMemoryWrite\x10p\x1a\
    \x04\xa0\xb5\x18\x01\x12)\n\x1fMessageType_DebugLinkFlashErase\x10q\x1a\
    \x04\xa0\xb5\x18\x01\x12(\n\x1eMessageType_EthereumGetAddress\x108\x1a\
    \x04\x90\xb5\x18\x01\x12%\n\x1bMessageType_EthereumAddress\x109\x1a\x04\
    \x98\xb5\x18\x01\x12$\n\x1aMessageType_EthereumSignTx\x10:\x1a\x04\x90\
    \xb5\x18\x01\x12'\n\x1dMessageType_EthereumTxRequest\x10;\x1a\x04\x98\
    \xb5\x18\x01\x12#\n\x19MessageType_EthereumTxAck\x10<\x1a\x04\x90\xb5\
    \x18\x01\x12)\n\x1fMessageType_EthereumSignMessage\x10@\x1a\x04\x90\xb5\
    \x18\x01\x12+\n!MessageType_EthereumVerifyMessage\x10A\x1a\x04\x90\xb5\
    \x18\x01\x12.\n$MessageType_EthereumMessageSignature\x10B\x1a\x04\x98\
    \xb5\x18\x01\x12#\n\x19MessageType_NEMGetAddress\x10C\x1a\x04\x90\xb5\
    \x18\x01\x12\x20\n\x16MessageType_NEMAddress\x10D\x1a\x04\x98\xb5\x18\
    \x01\x12\x1f\n\x15MessageType_NEMSignTx\x10E\x1a\x04\x90\xb5\x18\x01\x12\
    !\n\x17MessageType_NEMSignedTx\x10F\x1a\x04\x98\xb5\x18\x01\x12'\n\x1dMe\
    ssageType_NEMDecryptMessage\x10K\x1a\x04\x90\xb5\x18\x01\x12)\n\x1fMessa\
    geType_NEMDecryptedMessage\x10L\x1a\x04\x98\xb5\x18\x01\x12$\n\x1aMessag\
    eType_LiskGetAddress\x10r\x1a\x04\x90\xb5\x18\x01\x12!\n\x17MessageType_\
    LiskAddress\x10s\x1a\x04\x98\xb5\x18\x01\x12\x20\n\x16MessageType_LiskSi\
    gnTx\x10t\x1a\x04\x90\xb5\x18\x01\x12\"\n\x18MessageType_LiskSignedTx\
    \x10u\x1a\x04\x98\xb5\x18\x01\x12%\n\x1bMessageType_LiskSignMessage\x10v\
    \x1a\x04\x90\xb5\x18\x01\x12*\n\x20MessageType_LiskMessageSignature\x10w\
    \x1a\x04\x98\xb5\x18\x01\x12'\n\x1dMessageType_LiskVerifyMessage\x10x\
    \x1a\x04\x90\xb5\x18\x01\x12&\n\x1cMessageType_LiskGetPublicKey\x10y\x1a\
    \x04\x90\xb5\x18\x01\x12#\n\x19MessageType_LiskPublicKey\x10z\x1a\x04\
    \x98\xb5\x18\x01\x12&\n\x1bMessageType_TezosGetAddress\x10\x96\x01\x1a\
    \x04\x90\xb5\x18\x01\x12#\n\x18MessageType_TezosAddress\x10\x97\x01\x1a\
    \x04\x98\xb5\x18\x01\x12\"\n\x17MessageType_TezosSignTx\x10\x98\x01\x1a\
    \x04\x90\xb5\x18\x01\x12$\n\x19MessageType_TezosSignedTx\x10\x99\x01\x1a\
    \x04\x98\xb5\x18\x01\x12(\n\x1dMessageType_TezosGetPublicKey\x10\x9a\x01\
    \x1a\x04\x90\xb5\x18\x01\x12%\n\x1aMessageType_TezosPublicKey\x10\x9b\
    \x01\x1a\x04\x98\xb5\x18\x01\x12$\n\x19MessageType_StellarSignTx\x10\xca\
    \x01\x1a\x04\x90\xb5\x18\x01\x12)\n\x1eMessageType_StellarTxOpRequest\
    \x10\xcb\x01\x1a\x04\x98\xb5\x18\x01\x12(\n\x1dMessageType_StellarGetAdd\
    ress\x10\xcf\x01\x1a\x04\x90\xb5\x18\x01\x12%\n\x1aMessageType_StellarAd\
    dress\x10\xd0\x01\x1a\x04\x98\xb5\x18\x01\x12-\n\"MessageType_StellarCre\
    ateAccountOp\x10\xd2\x01\x1a\x04\x90\xb5\x18\x01\x12'\n\x1cMessageType_S\
    tellarPaymentOp\x10\xd3\x01\x1a\x04\x90\xb5\x18\x01\x12+\n\x20MessageTyp\
    e_StellarPathPaymentOp\x10\xd4\x01\x1a\x04\x90\xb5\x18\x01\x12+\n\x20Mes\
    sageType_StellarManageOfferOp\x10\xd5\x01\x1a\x04\x90\xb5\x18\x01\x122\n\
    'MessageType_StellarCreatePassiveOfferOp\x10\xd6\x01\x1a\x04\x90\xb5\x18\
    \x01\x12*\n\x1fMessageType_StellarSetOptionsOp\x10\xd7\x01\x1a\x04\x90\
    \xb5\x18\x01\x12+\n\x20MessageType_StellarChangeTrustOp\x10\xd8\x01\x1a\
    \x04\x90\xb5\x18\x01\x12*\n\x1fMessageType_StellarAllowTrustOp\x10\xd9\
    \x01\x1a\x04\x90\xb5\x18\x01\x12,\n!MessageType_StellarAccountMergeOp\
    \x10\xda\x01\x1a\x04\x90\xb5\x18\x01\x12*\n\x1fMessageType_StellarManage\
    DataOp\x10\xdc\x01\x1a\x04\x90\xb5\x18\x01\x12,\n!MessageType_StellarBum\
    pSequenceOp\x10\xdd\x01\x1a\x04\x90\xb5\x18\x01\x12&\n\x1bMessageType_St\
    ellarSignedTx\x10\xe6\x01\x1a\x04\x98\xb5\x18\x01\x12%\n\x1aMessageType_\
    TronGetAddress\x10\xfa\x01\x1a\x04\x90\xb5\x18\x01\x12\"\n\x17MessageTyp\
    e_TronAddress\x10\xfb\x01\x1a\x04\x98\xb5\x18\x01\x12!\n\x16MessageType_\
    TronSignTx\x10\xfc\x01\x1a\x04\x90\xb5\x18\x01\x12#\n\x18MessageType_Tro\
    nSignedTx\x10\xfd\x01\x1a\x04\x98\xb5\x18\x01\x12$\n\x19MessageType_Card\
    anoSignTx\x10\xaf\x02\x1a\x04\x90\xb5\x18\x01\x12'\n\x1cMessageType_Card\
    anoTxRequest\x10\xb0\x02\x1a\x04\x98\xb5\x18\x01\x12*\n\x1fMessageType_C\
    ardanoGetPublicKey\x10\xb1\x02\x1a\x04\x90\xb5\x18\x01\x12'\n\x1cMessage\
    Type_CardanoPublicKey\x10\xb2\x02\x1a\x04\x98\xb5\x18\x01\x12(\n\x1dMess\
    ageType_CardanoGetAddress\x10\xb3\x02\x1a\x04\x90\xb5\x18\x01\x12%\n\x1a\
    MessageType_CardanoAddress\x10\xb4\x02\x1a\x04\x98\xb5\x18\x01\x12#\n\
    \x18MessageType_CardanoTxAck\x10\xb5\x02\x1a\x04\x90\xb5\x18\x01\x12&\n\
    \x1bMessageType_CardanoSignedTx\x10\xb6\x02\x1a\x04\x98\xb5\x18\x01\x12)\
    \n\x1eMessageType_OntologyGetAddress\x10\xde\x02\x1a\x04\x90\xb5\x18\x01\
    \x12&\n\x1bMessageType_OntologyAddress\x10\xdf\x02\x1a\x04\x98\xb5\x18\
    \x01\x12+\n\x20MessageType_OntologyGetPublicKey\x10\xe0\x02\x1a\x04\x90\
    \xb5\x18\x01\x12(\n\x1dMessageType_OntologyPublicKey\x10\xe1\x02\x1a\x04\
    \x98\xb5\x18\x01\x12+\n\x20MessageType_OntologySignTransfer\x10\xe2\x02\
    \x1a\x04\x90\xb5\x18\x01\x12-\n\"MessageType_OntologySignedTransfer\x10\
    \xe3\x02\x1a\x04\x98\xb5\x18\x01\x12.\n#MessageType_OntologySignWithdraw\
    Ong\x10\xe4\x02\x1a\x04\x90\xb5\x18\x01\x120\n%MessageType_OntologySigne\
    dWithdrawOng\x10\xe5\x02\x1a\x04\x98\xb5\x18\x01\x120\n%MessageType_Onto\
    logySignOntIdRegister\x10\xe6\x02\x1a\x04\x90\xb5\x18\x01\x122\n'Message\
    Type_OntologySignedOntIdRegister\x10\xe7\x02\x1a\x04\x98\xb5\x18\x01\x12\
    5\n*MessageType_OntologySignOntIdAddAttributes\x10\xe8\x02\x1a\x04\x90\
    \xb5\x18\x01\x127\n,MessageType_OntologySignedOntIdAddAttributes\x10\xe9\
    \x02\x1a\x04\x98\xb5\x18\x01\x12'\n\x1cMessageType_RippleGetAddress\x10\
    \x90\x03\x1a\x04\x90\xb5\x18\x01\x12$\n\x19MessageType_RippleAddress\x10\
    \x91\x03\x1a\x04\x98\xb5\x18\x01\x12#\n\x18MessageType_RippleSignTx\x10\
    \x92\x03\x1a\x04\x90\xb5\x18\x01\x12%\n\x1aMessageType_RippleSignedTx\
    \x10\x93\x03\x1a\x04\x90\xb5\x18\x01\x123\n(MessageType_MoneroTransactio\
    nInitRequest\x10\xf5\x03\x1a\x04\x98\xb5\x18\x01\x12/\n$MessageType_Mone\
    roTransactionInitAck\x10\xf6\x03\x1a\x04\x98\xb5\x18\x01\x127\n,MessageT\
    ype_MoneroTransactionSetInputRequest\x10\xf7\x03\x1a\x04\x98\xb5\x18\x01\
    \x123\n(MessageType_MoneroTransactionSetInputAck\x10\xf8\x03\x1a\x04\x98\
    \xb5\x18\x01\x12@\n5MessageType_MoneroTransactionInputsPermutationReques\
    t\x10\xf9\x03\x1a\x04\x98\xb5\x18\x01\x12<\n1MessageType_MoneroTransacti\
    onInputsPermutationAck\x10\xfa\x03\x1a\x04\x98\xb5\x18\x01\x128\n-Messag\
    eType_MoneroTransactionInputViniRequest\x10\xfb\x03\x1a\x04\x98\xb5\x18\
    \x01\x124\n)MessageType_MoneroTransactionInputViniAck\x10\xfc\x03\x1a\
    \x04\x98\xb5\x18\x01\x12;\n0MessageType_MoneroTransactionAllInputsSetReq\
    uest\x10\xfd\x03\x1a\x04\x98\xb5\x18\x01\x127\n,MessageType_MoneroTransa\
    ctionAllInputsSetAck\x10\xfe\x03\x1a\x04\x98\xb5\x18\x01\x128\n-MessageT\
    ype_MoneroTransactionSetOutputRequest\x10\xff\x03\x1a\x04\x98\xb5\x18\
    \x01\x124\n)MessageType_MoneroTransactionSetOutputAck\x10\x80\x04\x1a\
    \x04\x98\xb5\x18\x01\x128\n-MessageType_MoneroTransactionAllOutSetReques\
    t\x10\x81\x04\x1a\x04\x98\xb5\x18\x01\x124\n)MessageType_MoneroTransacti\
    onAllOutSetAck\x10\x82\x04\x1a\x04\x98\xb5\x18\x01\x128\n-MessageType_Mo\
    neroTransactionMlsagDoneRequest\x10\x83\x04\x1a\x04\x98\xb5\x18\x01\x124\
    \n)MessageType_MoneroTransactionMlsagDoneAck\x10\x84\x04\x1a\x04\x98\xb5\
    \x18\x01\x128\n-MessageType_MoneroTransactionSignInputRequest\x10\x85\
    \x04\x1a\x04\x98\xb5\x18\x01\x124\n)MessageType_MoneroTransactionSignInp\
    utAck\x10\x86\x04\x1a\x04\x98\xb5\x18\x01\x124\n)MessageType_MoneroTrans\
    actionFinalRequest\x10\x87\x04\x1a\x04\x98\xb5\x18\x01\x120\n%MessageTyp\
    e_MoneroTransactionFinalAck\x10\x88\x04\x1a\x04\x98\xb5\x18\x01\x126\n+M\
    essageType_MoneroKeyImageExportInitRequest\x10\x92\x04\x1a\x04\x98\xb5\
    \x18\x01\x122\n'MessageType_MoneroKeyImageExportInitAck\x10\x93\x04\x1a\
    \x04\x98\xb5\x18\x01\x124\n)MessageType_MoneroKeyImageSyncStepRequest\
    \x10\x94\x04\x1a\x04\x98\xb5\x18\x01\x120\n%MessageType_MoneroKeyImageSy\
    ncStepAck\x10\x95\x04\x1a\x04\x98\xb5\x18\x01\x125\n*MessageType_MoneroK\
    eyImageSyncFinalRequest\x10\x96\x04\x1a\x04\x98\xb5\x18\x01\x121\n&Messa\
    geType_MoneroKeyImageSyncFinalAck\x10\x97\x04\x1a\x04\x98\xb5\x18\x01\
    \x12'\n\x1cMessageType_MoneroGetAddress\x10\x9c\x04\x1a\x04\x90\xb5\x18\
    \x01\x12$\n\x19MessageType_MoneroAddress\x10\x9d\x04\x1a\x04\x98\xb5\x18\
    \x01\x12(\n\x1dMessageType_MoneroGetWatchKey\x10\x9e\x04\x1a\x04\x90\xb5\
    \x18\x01\x12%\n\x1aMessageType_MoneroWatchKey\x10\x9f\x04\x1a\x04\x98\
    \xb5\x18\x01\x12-\n\"MessageType_DebugMoneroDiagRequest\x10\xa2\x04\x1a\
    \x04\x90\xb5\x18\x01\x12)\n\x1eMessageType_DebugMoneroDiagAck\x10\xa3\
    \x04\x1a\x04\x98\xb5\x18\x01:<\n\x07wire_in\x18\xd2\x86\x03\x20\x01(\x08\
    \x12!.google.protobuf.EnumValueOptionsR\x06wireIn:>\n\x08wire_out\x18\
    \xd3\x86\x03\x20\x01(\x08\x12!.google.protobuf.EnumValueOptionsR\x07wire\
    Out:G\n\rwire_debug_in\x18\xd4\x86\x03\x20\x01(\x08\x12!.google.protobuf\
    .EnumValueOptionsR\x0bwireDebugIn:I\n\x0ewire_debug_out\x18\xd5\x86\x03\
    \x20\x01(\x08\x12!.google.protobuf.EnumValueOptionsR\x0cwireDebugOut:@\n\
    \twire_tiny\x18\xd6\x86\x03\x20\x01(\x08\x12!.google.protobuf.EnumValueO\
    ptionsR\x08wireTiny:L\n\x0fwire_bootloader\x18\xd7\x86\x03\x20\x01(\x08\
    \x12!.google.protobuf.EnumValueOptionsR\x0ewireBootloader:C\n\x0bwire_no\
    _fsm\x18\xd8\x86\x03\x20\x01(\x08\x12!.google.protobuf.EnumValueOptionsR\
    \twireNoFsmB4\n#com.satoshilabs.trezor.lib.protobufB\rTrezorMessage\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
